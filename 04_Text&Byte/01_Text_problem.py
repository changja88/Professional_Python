# 텍스트와 바이트
# - 파이썬3 부터는 인간이 사용하는 텍스트 문자열과 원시 바이트 시퀀스를 엄격히 구분하기 시작했다
# - 유니코드 문자열, 이진 시퀀스 그리고 이 둘간의 변환에 사용되는 인코딩에 대해 설명한다
# - 주제
#   - 문자, 코드 포인트, 바이트 표현
#   - 이진 시퀀스의 고유한 특징 : bytes, bytearray, memoryview
#   - 전체 유니코드 및 레거시 문자셋에 대한 코덱
#   - 인코딩 에러를 피하고 다루기
#   - 텍스트 파일을 다룰 때의 모범 사례
#   - 기본 인코딩 및 표준 입출력 문제
#   - 정규화를 이용한 안전한 유니코드 텍스트 비교
#   - 정규화, 케이스 폴딩, 바릉ㅁ 구별 기홍 강제 제거를 위한 유틸리티 함수
#   - locale과 PyUCA 라이브러리를 이용한 유니코드 텍스느의 적절한 정렬
#   - 유니코드 데이터베이스 안의 문자 메타데이터
#   - str과 bytes를 다루는 이중 모드 API

# 문자 문제
# - '문자열'은 문자의 열이다 하지만 '문자'의 정의가 문제이다
# - 파이썬3 str에서 가져오는 항목도 유니코드 문자다
# - 유니코드 표준은 문자의 단위(코드 포인트) 원소와 특정 바이트 표현을 명확히 구분한다
# - 문자를 표현하는 실제 바이트는 사용하는 '인코딩'에 따라 달라진다
#   - 인코딩은 코드 포인트를 바이트 시퀀스로 변환하는 알고리즘이다
#   - 문자 A(U+0041)에 대한 코드 포인트는 UTF-8 인코딩에서는 1바이트 \x41이고 다른 인코딩에서는 또다른다
#   - 코드 포인트를 바이트로 변환하는 것을 인코딩, 바이트를 코드 포인트로 변환하는 것을 디코딩이라고 한다

s = 'café'
print(
    len(s)
)

b = s.encode('utf8')
print(b)
print(
    len(b)
)

print(
    b.decode('utf8')
)
