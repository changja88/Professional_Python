"""
Future는 어디에 있나?
"""
"""
- concurrent.futures.Future 와 asyncio.Future 가 있다
  이 두 Future클래스의 객체는 완료되었을 수도 있고 아닐 수도 있는 지연된 계산을 표현하기위해 사용된다

- Future는 대기중인 작업을 큐에 넣고, 완료 상태를 조사하고, 결과(혹은 예외)를 가져올 수 있도록 캡슐화 한다
- 우리가 알아야 할것은, 직접 객체를 생성하면 안 된다는 것이다
  Future 객체는 concurrent.futures나 asyncio같은 동시성 프레임워크에서만 배타적으로 생성해야 한다
  Future는 앞으로 일어날 일을 나타내고, Future의 실행을 스케쥴링하는 프레임워크만이 어떤 일이 일어날지 확실히 알 수 있기 때문
- 우리는 Future객체의 상태를 직접 변경하면 안된다. Future객체가 나타내는 연산이 완료되었을 때, 동시성 프레임워크가 Future
  객체의 상태를 변경하기 때문, 우리는 상태가 언제 바뀔지 모른다
- 일반적으로 클라이언트는 Future가 완료 되었는지 묻지 않고 콜백을 받는다(add_done_callback)
- result()메소드가 있는데, 완료된 경우 둘 다 콜러블의 결과를 반환하거나, 콜러블이 실행될 때 발생한 예외를 다시 발생시킨다
- 두 라이브러리에는 Future객체를 반환하는 함수가 많이 있다. 나머지 함수들은 사용자에게 보이지 않도록 자기 내부에서 Future
  개체를 사용한다
"""