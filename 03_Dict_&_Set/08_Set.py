# 집합 이론
#   - 파이썬에서 집합은 비교적 최근에 추가 되었으며 그리 맣이 사용되지 않는다
#   - set형과 set의 불변형 버전은 forzeset은 파이썬 2.3에 모듈로 처음 등장했으며, 2.6에서 내장형으로 승격되었다
#   - 딕트와 마찬가지로 메모리 오버해드가 크다
#   - 고유함을 보장하는 것 외에 집합형은 중위 연사자를 이용해서 기본적인 집합 연산을 구현한다
#   - a | b 는 합집합, a & b 는 교집합 a - b 는 차집합을 계산 한다
l = ['spam', 'spam', 'eggs', 'spam']

print(
    set(l)
)

#   - 파이썬 3에서는 공집합 이외의 집합을 표준 문자열로 표현하기 위해 언제나 {} 구문을 사용한다
a = set()
print(a)

#   - set 만드는 방법
s = {1}
print(
    type(s)
)
# 이렇게 만드는 것이 아래 처럼 생성자를 호출하는 것보다 더 빠르고 가독성이 좋다
# 생성자를 명시적으로 호출하는 경우에는 파이썬이 생성자를 가져오기 위해 집합명을 검색하고, 리스트를 생성하고, 이 리스트를 생성자에 전달해야 하므로 더 느라다
# 하지만 이렇게 생성을 하면, 리터럴 구문을 처리하는 경우, 파이썬은 BUILD_SET이라는 특수 바이트코드를 실행하기 때문에 빠르고 좋다
s = set([1, 2, 3])
print(
    type(s)
)
from dis import dis  # 디스어셈블러 함수인 dis.dis()를 이용해서 두개의 연산에 대한 바이트코드를 살펴본

dis('{1}')
print('----------------------------------------------------')

dis('set([1])')
# 변경 불가능한 집합 -> frozeset은 생성자를 통해서 만들어야 한다, 리터럴 구문이 없다
a = frozenset(range(10))
print(a)

# 지능형 집합 (set comprehension)
from unicodedata import name

a = {chr(i) for i in range(32, 256) if 'SIGN' in name(chr(i), '')}

print(a)
