"""
다중 상속과 메서드 결정 순서
"""
"""
- 다중 상속을 지원하는 언어에서는 별개의 상위클래스가 동일한 이름으로 메서드를 구현할 때 발생하는 이름 충돌 문제를 해결 해야한다
    - 다이아몬드 문제라고 한다
"""


class A:
    def ping(self):
        print('ping:', self)


class B(A):
    def pong(self):
        print('pong:', self)


class C(A):
    def pong(self):
        print('PONG:', self)


class D(B, C):
    def ping(self):
        super().ping()
        print('post-ping:', self)

    def pingpong(self):
        self.ping()
        super().ping()
        self.pong()
        super().pong() # 명시적으로 적어주지 않고 호출하면 B클래스의 메서드가 호출된다
        C.pong(self) # 명시적으로 적어주면, 해당 클래스의 메서드가 호출된


d = D()
d.pingpong()
"""
파이썬 다중 상속 메소드 호출 우선 순위 -> MRO, method resolution order
- 다중상속해서 동일한 함수의 이름이 슈퍼클래스에 있다면, 먼저 상속 된 클래스의 함수가 호출 된다
"""
"""
좋은 다중상속을 구현 하는 방법
- 1. 인터페이스 상속과 구현 상속을 구분한다
    - 다중 상속을 다룰 때는 우선 상속 이유를 명확히 하는 것이 도움이 된다. 상속을 하는 이유는 주로 다음과 같다
        - 인터페이스 상속은 'is-a'관계를 의미하는 서브타입을 생성한다
        - 구현 상속은 재사용을 통해 코드 중복을 피한다
        
- 2. ABC를 이용해서 인터페이스를 명확히 한다
    - 파이썬에서는 인터페이스를 정의하기 위해 만들어진 클래스를 ABC로 명시한다

- 3. 코드를 재사용하기 위해 믹스인을 사용한다
    - 'is-a'관계를 나타내지 않고 서로 관련 없는 여러 서브클래스에서 코드를 재사용하기 위해 설계된 클래스는 명시적으로
      믹스인 클래스로 만들어야 한다.개념적으로 믹스인 클래스는 새로운 자료형을 정의하지 않고, 단지 재사용할 메서드를 
      묶어놓을 뿐이다. 믹스인 클래스로 객체를 생성하면 안 되며, 믹스인 클래스를 상속하는 구상 클래스는 다른 클래스도
      상속해야한다. 각각의 믹스인 클래스는 밀접히 연관된 메서드 몇 개를 구현해서 하나의 구체적인 행위를 제공해야 한다

- 4. 이름을 통해 믹스인임을 명확히 한다
    - 파이썬에서는 믹스인 클래스를 명시하는 공식적인 방법이 없으므로, 클래스명 뒤에 Mixin을 붙일 것을 강력히 권장한다

- 5. ABC가 믹스인이 될 수는 있지만, 믹스인이라고 해서 ABC인 것은 아니다
    - ABC는 구상 메서드를 구현할 수 있으므로 믹스인으로 사용할 수도 있다. 그리고 ABC는 자료형을 정의 하지만,
      믹스인은 자료형을 정의하지 않는다. 게다가 ABC는 다른 클래스의 유일한 기저 클래스가 될 수 있는 반면, 믹스인 하나만
      사용해서 서브클래스를 정의하면 안된다
    - 믹스인에는 적용되지 않고 ABC에만 적용되는 제한이 하나 있다. ABC에서 구현된 구상 메서드는 해당 ABC나 슈퍼클래스의
      메서드만 사용할 수 있다. 즉, ABC에 정의된 구상 메서드는 일종의 편의를 위한 것일 뿐이다. 구상 메서드가 수행하는
      모든 것은 ABC의 다른 메서드를 호출해서 동일하게 수행할 수 있기 때문이다

-6. 두 개 이상의 구상 클래스에서 상속받지 않는다
    - 구상 클래스는 0개 또는 많아야 하나의 구상 슈퍼클래스를 가져야한다.
    - 즉, 구상 클래스의 슈퍼 클래스 중 하나를 제외한 나머지 클래스는 ABC나 믹스인 이어야한다
    
-7. 사용자에게 집합 클래스를 제공한다
    - ABC 또는 믹스인을 조합해서 호출 코드에 유용한 기능을 제공할 수 있을 때는, 이들을 적절히 통합하는 클래스를 제공하는 것이 좋다
    - 본체가 비어있지만, 클래스는 각종 서비스를 제공한다
    - 예를 들어 Widget가 위젯을 구성하는데 무조건 필요한 클래스들을 상속해놓기만 하고, 구현은 하나도 없다
    
-8. 클래스 상속보다 객체 구성을 사용하라        
"""
