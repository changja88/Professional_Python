"""
__slots__ 클래스 속성으로 공간 절약하기
- 기본적으로 파이썬은 객체 속성을 각 객체 안의 __dict__라는 딕셔너리형 속성에 저장한다
- 딕셔너리는 빠른 접근 속도를 제공하기 위해 내부에 해시 테이블을 유지하므로 메모리 사용량 부담이 상당히 크다
- 만약 속성이 몇개 없는 수백만 개의 객체를 다룬다면, __slots__클래스 속성을 이용해서 메모리 사용량을 엄청나게 줄일 수있다
- __slots__속성은 파이썬 인터프리터가 객체 속성을 딕셔너리 대신 튜플에 저장하게 만든다
- 슈퍼 클래스에서 상속받은 __slots__속성은 서브클래스에 영향을 미치지 않느다
    - 파이썬은 각 클래스에서 개별적으로 정의된 __slots__속성만 고려한다
- 고정된 스크마의 아주 큰 데이터베이스와 같은 테이블 형태의 데이터를 사용할 때 유용하다
    - 하지만 이러거라면 NumPy나, Pandas(비수치형 데이터 처리) 라이브러리를 사용하는게 더 좋을수도 있다
"""

"""
- __slots__속성을 정의하려면 이 이름의 클래스 속성을 생성하고 여기에 객체 속성 식별자들을 담은 문자열의 반복형을 할당한다
- 불변형인 튜플을 사용하면 __slots__정의를 변경할 수 없음을 알려주므로, 주로 __slots__를 정의할때 튜플을 사용한다
- __slots를 정의함으로써 '이 속성들이 이 클래스 객체가 가지는 속성'임을 인터프리터에게 알려준다
    - 파이썬 인터프리터는 이 속성들을 각 객체의 튜플형 구조체에 저장함으로써 __dict__속성을 각 객체마다 유지하는 부담을 줄인다
- 클래스 안에 __slots__를 명시하는 경우, 객체는 __slots__에 명시되지 않은 속성을 가질수 없게 된다
    - 사실 이건 __slots__가 존재하는 이유가 아니고 부작용이다
    - 새로운 속성을 추가 하지 못하도록 하기 위해서 __slots__를 작성하는 것은 적절하지 않다
"""
"""
- 그러나 애써 절약한 메모리를 낭비할 수 도 있다
- __dict__문자열을 __slots__리스트에 추가하면 __slots__에서 지정한 속성들을 각 객체의 튜플에 저장하지만,
  동적으로 속성을 생성 할 수도 있게 해준다
  이때, 동적으로 생성한 속성은 __dict__에 저장된다. 물론 __dict__를 __slots__안에 넣으면, 각 객체의 정적 및 동적 속성의
  수와 사용법에 따라 달라지기는 하지만 __slots__를 사용하는 의미를 상실하게 된다.
"""
"""
주의사항
- 상속된 __slots__는 무시 하므로 클래스 마다 정의 해야 한다
- __dict__를 __slots__에 추가하지 않는 한 객체는 __slots__에 추가된 속성만 가질수 있다 
- __dict__를 __slots__에 추가하면 메모리 절감 효과가 반감될수 있다
- __weakref__를 __slots__에 추가하지 않으면 객체가 약한 참조의 대상이 될 수 없다
"""


class Vector2d:
    __slots__ = ('__x', '__y')  # 튜플로 __slots__를 정의한다

    typecode = 'd'
